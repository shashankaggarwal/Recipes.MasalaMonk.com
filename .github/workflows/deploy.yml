name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy-backend:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:13
        env:
          POSTGRES_DB: mydatabase
          POSTGRES_USER: myuser
          POSTGRES_PASSWORD: mypassword
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          docker build -t ghcr.io/shashankaggarwal/recipes.masalamonk.com/backend:latest -f django_backend/Dockerfile .
          docker push ghcr.io/shashankaggarwal/recipes.masalamonk.com/backend:latest

      - name: Start ssh-agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.DIGITALOCEAN_SSH_KEY }}

      - name: Deploy to DigitalOcean
        run: |
          ssh -o StrictHostKeyChecking=no root@157.230.29.35 << EOF
            cd /root/Recipes.MasalaMonk.com
            git pull origin main
            docker-compose down
            docker-compose pull web
            docker-compose up -d
          EOF

  deploy-frontend:
    needs: build-and-deploy-backend
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2  # Checks out your repository under $GITHUB_WORKSPACE

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20.11.1'  # Use the same Node.js version as your local environment

    - name: Install Dependencies
      run: npm install  # Install npm dependencies

    - name: Build
      run: npm run build  # Run the build script specified in your package.json

    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v20  # This action handles deployment to Vercel
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}  # Vercel API token
        vercel-org-id: ${{ secrets.VERCEL_TEAM_ID }}  # Use Team ID in place of Org ID if applicable
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}  # Vercel Project ID
        vercel-args: '--prod --yes'  # Deploy to production and accept all prompts
